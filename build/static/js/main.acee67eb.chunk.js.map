{"version":3,"sources":["components/AppBackground/images/bg-night-pc.svg","components/AppBackground/images/bg-day-mobile.png","components/AppBackground/images/bg-night-mobile.png","utils/api.ts","components/Themes/theme-context.ts","components/AppBackground/AppBackground.tsx","components/Menu/Menu.tsx","components/Search/Search.tsx","components/LoadingAnimation/Spinner.tsx","components/CurrentForecast/CurrentForecast.tsx","utils/getWeatherIcon.ts","components/DailyForecast/ForecastDetails.tsx","components/DailyForecast/Day.tsx","components/DailyForecast/DailyForecast.tsx","components/App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","API_KEY","get","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","response","data","wrap","_context","prev","next","fetch","mode","sent","ok","Error","statusText","json","abrupt","t0","console","log","stop","_x","apply","this","arguments","getCurrentForecast","city","getDailyForecast","getForecast","Promise","all","themes","light","appBackground","background","dailyForecast","dark","ThemeContext","React","createContext","theme","toggleTheme","AppBackground","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","backgroundImg","createRef","dayPc","dayPcImg","dayMobile","dayMobileImg","nightPc","nightPcImg","nightMobile","nightMobileImg","current","dayTime","document","documentElement","style","setProperty","concat","_this2","setBackgroundImage","react_default","createElement","Consumer","className","ref","backgroundColor","Component","Menu","onClickMenu","e","setState","prevState","isOpen","onClickButtonSimple","buttonSimple","toggleButtonSimple","onClickTheme","buttonTheme","toggleButtonTheme","state","isButtonSimple","isButtonTheme","onClick","Fragment","Search","input","centerInput","value","target","length","isEmpty","onChange","submitInput","keyCode","trim","isValidCityName","turnOnLoading","onSubmit","isValid","name","test","getElementById","id","type","placeholder","autoComplete","onKeyUp","Dots","CurrentForecast","date","Date","toLocaleString","weekday","forecast","temp_now","temp","timestamp_local","Math","round","getDate","PureComponent","getWeatherIcon","code","toString","ForecastDetails","degree","_this$props$forecast","rh","precip","wind_dir","wind_spd","isSimpleMode","transform","Day","weather","max_temp","datetime","min_temp","renderForecastDetails","DailyForecast","map","day","DailyForecast_Day","key","DailyForecast_ForecastDetails","App","onSearchChange","cityName","country–°ode","_city","currentTimeRaw","currentForecastData","dailyForecastData","currentTime","error","_get","removeFirstDay","getTime","isLoading","menuButtonSimple","menu","objectSpread","menuButtonTheme","city_name","country_code","timezone","isMenuOpen","shift","getHours","Provider","components_AppBackground_AppBackground","components_Menu_Menu","components_Search_Search","LoadingAnimation_Spinner","components_CurrentForecast_CurrentForecast","components_DailyForecast_DailyForecast","ReactDOM","render","react_router_dom","src_components_App"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iaCElCC,EAAU,wCAOVC,EAAG,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEeC,MAAMP,EAAK,CAAEQ,KAAM,SAFlC,WAEFP,EAFEG,EAAAK,MAGMC,GAHN,CAAAN,EAAAE,KAAA,cAIA,IAAIK,MAAMV,EAASW,YAJnB,cAAAR,EAAAE,KAAA,EAMSL,EAASY,OANlB,cAMJX,EANIE,EAAAK,KAAAL,EAAAU,OAAA,SAODZ,GAPC,eAAAE,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SASRY,QAAQC,IAARb,EAAAW,IATQX,EAAAU,OAAA,SAUD,SAVC,yBAAAV,EAAAc,SAAAnB,EAAA,kBAAH,gBAAAoB,GAAA,OAAA1B,EAAA2B,MAAAC,KAAAC,YAAA,GAcIC,EAAqB,SAACC,GAAD,OAChChC,EApBQ,uDAoBmBgC,EAjBf,WAiB8BjC,IAC/BkC,EAAmB,SAACD,GAAD,OAC9BhC,EApBQ,sDAoBiBgC,EAnBb,WAmB4BjC,IAC7BmC,EAAc,SAACF,GAAD,OACzBG,QAAQC,IAAI,CAACL,EAAmBC,GAAOC,EAAiBD,MC1B7CK,EAAS,CACpBC,MAAO,CACLC,cAAe,CACbC,WAAY,eAEdC,cAAe,CACbD,WAAY,YAGhBE,KAAM,CACJH,cAAe,CACbC,WAAY,SAEdC,cAAe,CACbD,WAAY,WAKLG,EAAeC,IAAMC,cAAc,CAC9CC,MAAOT,EAAOC,MACdS,YAAa,0ECuDAC,cAvDb,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAhD,OAAAiD,EAAA,EAAAjD,CAAA2B,KAAAmB,IACxBE,EAAAhD,OAAAkD,EAAA,EAAAlD,CAAA2B,KAAA3B,OAAAmD,EAAA,EAAAnD,CAAA8C,GAAAM,KAAAzB,KAAMoB,KAHAV,mBAEkB,EAAAW,EADlBK,mBACkB,EAGxBL,EAAKX,cAAgBK,IAAMY,YAE3BN,EAAKK,cAAgB,CACnBE,MAAOC,IACPC,UAAWC,IACXC,QAASC,IACTC,YAAaC,KATSd,oFAcU,MAA9BrB,KAAKU,cAAc0B,UACjBpC,KAAKoB,MAAMiB,SACbC,SAASC,gBAAgBC,MAAMC,YAC7B,aADF,QAAAC,OAEU1C,KAAK0B,cAAcE,MAF7B,OAIAU,SAASC,gBAAgBC,MAAMC,YAC7B,iBADF,QAAAC,OAEU1C,KAAK0B,cAAcI,UAF7B,SAKAQ,SAASC,gBAAgBC,MAAMC,YAC7B,aADF,QAAAC,OAEU1C,KAAK0B,cAAcM,QAF7B,OAIAM,SAASC,gBAAgBC,MAAMC,YAC7B,iBADF,QAAAC,OAEU1C,KAAK0B,cAAcQ,YAF7B,0CAQG,IAAAS,EAAA3C,KAGP,OAFAA,KAAK4C,qBAGHC,EAAArE,EAAAsE,cAAChC,EAAaiC,SAAd,KACG,SAAA3E,GAAA,IAAG6C,EAAH7C,EAAG6C,MAAH,OACC4B,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,iBAAiBC,IAAKN,EAAKjC,eACxCmC,EAAArE,EAAAsE,cAAA,OACEE,UAAU,aACVR,MAAO,CAAEU,gBAAiBjC,EAAMP,cAAcC,wBAjDhCwC,aCkEbC,qBApEb,SAAAA,EAAYhC,GAAc,IAAAC,EAAA,OAAAhD,OAAAiD,EAAA,EAAAjD,CAAA2B,KAAAoD,IACxB/B,EAAAhD,OAAAkD,EAAA,EAAAlD,CAAA2B,KAAA3B,OAAAmD,EAAA,EAAAnD,CAAA+E,GAAA3B,KAAAzB,KAAMoB,KASRiC,YAAc,SAACC,GACbjC,EAAKkC,SAAS,SAAAC,GAAS,MAAK,CAC1BC,QAASD,EAAUC,WAZGpC,EAgB1BqC,oBAAsB,SAACJ,GACrBjC,EAAKkC,SAAS,SAAAC,GAAS,MAAK,CAC1BG,cAAeH,EAAUG,gBAE3BtC,EAAKD,MAAMwC,sBApBavC,EAuB1BwC,aAAe,SAACP,GACdjC,EAAKkC,SAAS,SAAAC,GAAS,MAAK,CAC1BM,aAAcN,EAAUM,eAE1BzC,EAAKD,MAAM2C,qBAxBX1C,EAAK2C,MAAQ,CACXP,QAAQ,EACRE,aAActC,EAAKD,MAAM6C,eACzBH,YAAazC,EAAKD,MAAM8C,eANF7C,wEA8BjB,IAAAsB,EAAA3C,KACP,OACE6C,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,YACbH,EAAArE,EAAAsE,cAAA,OACEE,UAAWhD,KAAKgE,MAAMP,OAAS,yBAA2B,WAC1DU,QAAS,SAAAb,GAAC,OAAIX,EAAKU,YAAYC,KAE/BT,EAAArE,EAAAsE,cAAA,aAED9C,KAAKgE,MAAMP,QACVZ,EAAArE,EAAAsE,cAAAD,EAAArE,EAAA4F,SAAA,KACEvB,EAAArE,EAAAsE,cAAA,UACEE,UACEhD,KAAKgE,MAAML,aACP,iDACA,gCAENQ,QAAS,SAAAb,GAAC,OAAIX,EAAKe,oBAAoBJ,KANzC,eAQetD,KAAKgE,MAAML,aAAe,KAAO,OAEhDd,EAAArE,EAAAsE,cAAA,UACEE,UACEhD,KAAKgE,MAAMF,YACP,gDACA,+BAENK,QAAS,SAAAb,GAAC,OAAIX,EAAKkB,aAAaP,KANlC,cAQctD,KAAKgE,MAAMF,YAAc,KAAO,gBA5DvCX,cC6DJkB,qBA7Db,SAAAA,EAAYjD,GAAc,IAAAC,EAAA,OAAAhD,OAAAiD,EAAA,EAAAjD,CAAA2B,KAAAqE,IACxBhD,EAAAhD,OAAAkD,EAAA,EAAAlD,CAAA2B,KAAA3B,OAAAmD,EAAA,EAAAnD,CAAAgG,GAAA5C,KAAAzB,KAAMoB,KAFAkD,WACkB,EAAAjD,EAU1BkD,YAAc,SAACjB,GACb,IAAMkB,EAAQlB,EAAEmB,OAAOD,MACnBA,EAAME,OACRrD,EAAKkC,SAAS,CAAEoB,SAAS,IACpBtD,EAAKkC,SAAS,CAAEoB,SAAS,IAEhCtD,EAAKD,MAAMwD,SAASJ,IAhBInD,EAmB1BwD,YAAc,SAACvB,GACb,IAAMkB,EAAQlB,EAAEmB,OAAOD,MAEvB,GADkB,KACdlB,EAAEwB,QAAuB,CAC3B,IAAM3E,EAAOmD,EAAEmB,OAAOD,MAAMO,OACxB1D,EAAK2D,gBAAgBR,KACvBnD,EAAKD,MAAM6D,gBACX5D,EAAKD,MAAM8D,SAAS/E,MAvBxBkB,EAAK2C,MAAQ,CACXmB,SAAS,EACTR,SAAS,GAEXtD,EAAKiD,MAAQvD,IAAMY,YAPKN,+EA+BV+D,GACd,QAASA,IAAS,KAAKC,KAAKD,+CAIR9C,SAASgD,eAAe,UACrCd,MAAQxE,KAAKoB,MAAMjB,sCAGnB,IAAAwC,EAAA3C,KACP,OACE6C,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,oBACbH,EAAArE,EAAAsE,cAAA,SACEE,UAAWhD,KAAKgE,MAAMW,QAAU,GAAK,mBACrCY,GAAG,SACHH,KAAK,SACLI,KAAK,OACLhB,MAAOxE,KAAKoB,MAAMjB,KAClB8C,IAAKjD,KAAKsE,MACVmB,YAAY,4BACZC,aAAa,MAEbd,SAAU,SAAAtB,GAAC,OAAIX,EAAK4B,YAAYjB,IAChCqC,QAAS,SAAArC,GAAC,OAAIX,EAAKkC,YAAYvB,cAxDpBH,oBCCNyC,MAXf,SAAcxE,GACZ,OACEyB,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,gBACbH,EAAArE,EAAAsE,cAAA,YACAD,EAAArE,EAAAsE,cAAA,YACAD,EAAArE,EAAAsE,cAAA,YACAD,EAAArE,EAAAsE,cAAA,cCoBS+C,yLA1BLC,GAEN,OADc,IAAIC,KAAKD,GACRE,eAAe,QAAS,CAAEC,QAAS,0CAIlD,GAAIjG,KAAKoB,MAAM8E,SAASrH,KAAK6F,OAAQ,CACnC,IAAMyB,EAAmBnG,KAAKoB,MAAM8E,SAASrH,KAAK,GAAGuH,KAC/CC,EAA0BrG,KAAKoB,MAAM8E,SAASrH,KAAK,GACtDwH,gBACH,OACExD,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,oBACbH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,gCACZsD,KAAKC,MAAMJ,IAEdtD,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,wBACZhD,KAAKwG,QAAQH,KAKpB,OAAOxD,EAAArE,EAAAsE,cAAA,+BAtBiB/B,IAAM0F,gBCAvBC,SAAiB,SAACC,GAE7B,OAAQA,EAAKC,YACX,IAAK,MAEL,IAAK,MACH,MAAO,uBACT,IAAK,MACH,MAAO,sBACT,IAAK,MACH,MAAO,mBACT,IAAK,MAEL,IAAK,MAEL,IAAK,MACH,MAAO,eACT,IAAK,MAEL,IAAK,MAEL,IAAK,MACH,MAAO,iBACT,IAAK,MAEL,IAAK,MACH,MAAO,cACT,IAAK,MAEL,IAAK,MACH,MAAO,UACT,IAAK,MAEL,IAAK,MACH,MAAO,iBACT,IAAK,MACH,MAAO,aACT,IAAK,MACH,MAAO,cACT,IAAK,MACH,MAAO,UACT,IAAK,MACH,MAAO,oBACT,IAAK,MACH,MAAO,eACT,IAAK,MAEL,IAAK,MACH,MAAO,WACT,IAAK,MACH,MAAO,eACT,IAAK,MACH,MAAO,oBACT,IAAK,MACH,MAAO,eACT,IAAK,MACH,MAAO,aACT,IAAK,MACH,MAAO,UACT,IAAK,MACH,MAAO,aACT,IAAK,MACH,MAAO,UACT,IAAK,MAEL,IAAK,MACH,MAAO,aACT,IAAK,MACiB,MAAO,eAG7B,IAAK,MAEL,IAAK,MAEL,IAAK,MACH,MAAO,gBACT,IAAK,MACH,MAAO,YACT,IAAK,MACH,MAAO,QACT,QACE,MAAO,QCrCEC,mLA5CJ,IDLiBC,ECKjBC,EACoC/G,KAAKoB,MAAM8E,SAA9Cc,EADDD,EACCC,GAAIC,EADLF,EACKE,OAAQC,EADbH,EACaG,SAAUC,EADvBJ,EACuBI,SAC9B,OACEtE,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,wBACZhD,KAAKoB,MAAMgG,aACVvE,EAAArE,EAAAsE,cAAAD,EAAArE,EAAA4F,SAAA,KACEvB,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,sBACbH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,4BACfH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,2BAEjBH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,sBACbH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,6BACfH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,0BAInBH,EAAArE,EAAAsE,cAAAD,EAAArE,EAAA4F,SAAA,KACEvB,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,sBACbH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,2BACbH,EAAArE,EAAAsE,cAAA,KAAGE,UAAU,mBADf,IACoCsD,KAAKC,MAAMS,GAD/C,MAGAnE,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,yBACbH,EAAArE,EAAAsE,cAAA,KAAGE,UAAU,oBADf,IACqCsD,KAAKC,MAAMU,GADhD,QAIFpE,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,sBACbH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,4BACbH,EAAArE,EAAAsE,cAAA,KACEE,UAAU,uBACVR,MAAO,CAAE6E,WDlCCP,ECkCsBI,EDjCzC,WAAaJ,EAAS,YCoCjBjE,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,uBACZsD,KAAKC,MAAMY,GACZtE,EAAArE,EAAAsE,cAAA,8BAnCc/B,IAAM0F,eCmCrBa,kLA7BLxB,GAEN,OADc,IAAIC,KAAKD,GACRE,eAAe,QAAS,CAAEC,QAAS,0CAG3C,IAAAc,EAMH/G,KAAKoB,MAAM8E,SAJFS,EAFNI,EAELQ,QAAWZ,KACXa,EAHKT,EAGLS,SAEAC,GALKV,EAILW,SAJKX,EAKLU,UAEF,OACE5E,EAAArE,EAAAsE,cAAA,UAAQE,UAAU,yBAChBH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,sBAAsBhD,KAAKwG,QAAQiB,IACjDzH,KAAKoB,MAAMuG,wBACZ9E,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,sBACbH,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,+BACbH,EAAArE,EAAAsE,cAAA,KAAGE,UAAW,MAAQ0D,EAAeC,MAEvC9D,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,8BACZsD,KAAKC,MAAMiB,aAtBNzG,IAAM0F,eC0BTmB,mLA3BJ,IAAAvG,EAAArB,KACP,OACE6C,EAAArE,EAAAsE,cAAChC,EAAaiC,SAAd,KACG,SAAA3E,GAAA,IAAG6C,EAAH7C,EAAG6C,MAAH,OACC4B,EAAArE,EAAAsE,cAAA,OACEE,UAAU,iBACVR,MAAO,CAAEU,gBAAiBjC,EAAML,cAAcD,aAE7CU,EAAKD,MAAM8E,SAASrH,KAAKgJ,IAAI,SAAAC,GAAG,OAC/BjF,EAAArE,EAAAsE,cAACiF,EAAD,CACE7B,SAAU4B,EACVE,IAAKF,EAAIL,SACTE,sBAAuB,kBACrB9E,EAAArE,EAAAsE,cAACmF,EAAD,CACEb,aAAc/F,EAAKD,MAAMgG,aACzBlB,SAAU4B,mBAhBF/G,IAAM0F,eCoKnByB,qBA1Ib,SAAAA,EAAY9G,GAAc,IAAAC,EAAA,OAAAhD,OAAAiD,EAAA,EAAAjD,CAAA2B,KAAAkI,IACxB7G,EAAAhD,OAAAkD,EAAA,EAAAlD,CAAA2B,KAAA3B,OAAAmD,EAAA,EAAAnD,CAAA6J,GAAAzG,KAAAzB,KAAMoB,KA4CR+G,eAAiB,SAAC3D,GAChBnD,EAAKkC,SAAS,CAAEpD,KAAMqE,KA9CEnD,EAiD1B6D,SAjD0B,eAAA9G,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAiDf,SAAAC,EAAOyB,GAAP,IAAAtB,EAAAuJ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnK,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACaoB,EAAYF,GADzB,OACLtB,EADKE,EAAAK,KAETO,QAAQC,IAAIf,GACI,UAAZA,EAAK,IACPc,QAAQC,IAAI,SACZyB,EAAKkC,SAAS,CAAEoF,OAAO,MAEnBP,EAAWQ,IAAK/J,EAAK,GAAI,aACzBwJ,EAAcO,IAAK/J,EAAK,GAAI,gBAC5BsB,EAHC,GAAAuC,OAGS0F,EAHT,MAAA1F,OAGsB2F,GACvBE,EAAiBK,IAAK/J,EAAK,GAAGA,KAAK,GAAI,mBACvC2J,EAAsB3J,EAAK,GAC3B4J,EAAoBpH,EAAKwH,eAAehK,EAAK,IAC7C6J,EAAcrH,EAAKyH,QAAQP,GAC/BlH,EAAKkC,SAAS,CACZiF,oBAAqBA,EACrBC,kBAAmBA,EACnBM,WAAW,EACX5I,KAAMA,EACNkC,QAASqG,EAAc,GAAKA,EAAc,GAC1CC,OAAO,KApBF,wBAAA5J,EAAAc,SAAAnB,MAjDe,gBAAAoB,GAAA,OAAA1B,EAAA2B,MAAAC,KAAAC,YAAA,GAAAoB,EA0E1B4D,cAAgB,WACd5D,EAAKkC,SAAS,CACZwF,WAAW,KA5EW1H,EAqF1B2H,iBAAmB,WACjB3H,EAAKkC,SAAS,SAAAC,GAAS,MAAK,CAC1ByF,KAAK5K,OAAA6K,EAAA,EAAA7K,CAAA,GACAgD,EAAK2C,MAAMiF,KADZ,CAEFhF,gBAAiBT,EAAUyF,KAAKhF,qBAzFZ5C,EA8F1B8H,gBAAkB,WAChB9H,EAAKH,eA5FLG,EAAK2C,MAAQ,CACXwE,oBAAqB,CACnB3J,KAAM,GACNuK,UAAW,GACXC,aAAc,GACdC,SAAU,IAEZb,kBAAmB,CACjB5J,KAAM,GACNuK,UAAW,GACXC,aAAc,GACdC,SAAU,IAEZL,KAAM,CACJM,YAAY,EACZtF,gBAAgB,EAChBC,eAAe,GAEjB6E,WAAW,EACX5I,KAAM,WACNkC,SAAS,EACTsG,OAAO,EACP1H,MAAOT,EAAOC,MACdS,YAAaG,EAAKH,aA1BIG,mFA+BxBrB,KAAKkF,SAASlF,KAAKgE,MAAM7D,4CAIzBH,KAAKuD,SAAS,SAAAS,GAAK,MAAK,CACtB/C,MAAO+C,EAAM/C,QAAUT,EAAOK,KAAOL,EAAOC,MAAQD,EAAOK,+CAIhDqF,GAEb,OADAA,EAASrH,KAAK2K,QACPtD,kCAsCDJ,GAEN,OADc,IAAIC,KAAKD,GACR2D,4CAiBf,OACE5G,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,OACbH,EAAArE,EAAAsE,cAAChC,EAAa4I,SAAd,CAAuBlF,MAAOxE,KAAKgE,OACjCnB,EAAArE,EAAAsE,cAAC6G,EAAD,CAAetH,QAASrC,KAAKgE,MAAM3B,UACnCQ,EAAArE,EAAAsE,cAAC8G,EAAD,CACEhG,mBAAoB5D,KAAKgJ,iBACzBjF,kBAAmB/D,KAAKmJ,gBACxBlF,eAAgBjE,KAAKgE,MAAMiF,KAAKhF,eAChCC,cAAelE,KAAKgE,MAAMiF,KAAK/E,gBAEjCrB,EAAArE,EAAAsE,cAAC+G,EAAD,CACE3E,SAAUlF,KAAKkF,SACfN,SAAU5E,KAAKmI,eACfhI,KAAMH,KAAKgE,MAAM7D,KACjB8E,cAAejF,KAAKiF,gBAErBjF,KAAKgE,MAAM2E,MACV9F,EAAArE,EAAAsE,cAAA,OAAKE,UAAU,aAAf,kBAEAH,EAAArE,EAAAsE,cAAAD,EAAArE,EAAA4F,SAAA,KACGpE,KAAKgE,MAAM+E,UACVlG,EAAArE,EAAAsE,cAACgH,EAAD,MAEAjH,EAAArE,EAAAsE,cAAAD,EAAArE,EAAA4F,SAAA,KACEvB,EAAArE,EAAAsE,cAACiH,EAAD,CAAiB7D,SAAUlG,KAAKgE,MAAMwE,sBACtC3F,EAAArE,EAAAsE,cAACkH,EAAD,CACE9D,SAAUlG,KAAKgE,MAAMyE,kBACrBrB,aAAcpH,KAAKgE,MAAMiF,KAAKhF,4BA/HhCd,sBCxBlB8G,IAASC,OACPrH,EAAArE,EAAAsE,cAACqH,EAAA,EAAD,KACEtH,EAAArE,EAAAsE,cAACsH,EAAD,OAEF9H,SAASgD,eAAe","file":"static/js/main.acee67eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-night-pc.ea2b56cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg-day-mobile.43f61d16.png\";","module.exports = __webpack_public_path__ + \"static/media/bg-night-mobile.cfd5517e.png\";","//let proxyUrl: string = \"https://cors-anywhere.herokuapp.com/\";\r\nlet proxyUrl: string = \"\";\r\nconst API_KEY = \"&key=4e4006dc280346f9ab2a2471ffc67574\";\r\nconst CURRENT_FORECAST_URL =\r\n  proxyUrl + `https://api.weatherbit.io/v2.0/forecast/hourly?city=`; //two day hourly\r\nconst DAILY_FORECAST_URL =\r\n  proxyUrl + `https://api.weatherbit.io/v2.0/forecast/daily?city=`; // 16 day forecast\r\nconst UNITS = \"&units=M\";\r\n\r\nconst get = async (url: string) => {\r\n  try {\r\n    const response = await fetch(url, { mode: \"cors\" });\r\n    if (!response.ok) {\r\n      throw new Error(response.statusText);\r\n    }\r\n    let data = await response.json();\r\n    return data;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return \"error\";\r\n  }\r\n};\r\n\r\nexport const getCurrentForecast = (city: String) =>\r\n  get(CURRENT_FORECAST_URL + city + UNITS + API_KEY);\r\nexport const getDailyForecast = (city: String) =>\r\n  get(DAILY_FORECAST_URL + city + UNITS + API_KEY);\r\nexport const getForecast = (city: String) =>\r\n  Promise.all([getCurrentForecast(city), getDailyForecast(city)]);\r\n","import React from \"react\";\r\n\r\nexport const themes = {\r\n  light: {\r\n    appBackground: {\r\n      background: \"transparent\"\r\n    },\r\n    dailyForecast: {\r\n      background: \"#0a1949\"\r\n    }\r\n  },\r\n  dark: {\r\n    appBackground: {\r\n      background: \"black\"\r\n    },\r\n    dailyForecast: {\r\n      background: \"black\"\r\n    }\r\n  }\r\n};\r\n\r\nexport const ThemeContext = React.createContext({\r\n  theme: themes.light,\r\n  toggleTheme: () => {}\r\n});\r\n","import \"./AppBackground.scss\";\r\nimport React, { Component } from \"react\";\r\nimport { ThemeContext } from \"../Themes/theme-context\";\r\n\r\nimport dayPcImg from \"./images/bg-night-pc.svg\";\r\nimport dayMobileImg from \"./images/bg-day-mobile.png\";\r\nimport nightPcImg from \"./images/bg-night-pc.svg\";\r\nimport nightMobileImg from \"./images/bg-night-mobile.png\";\r\n\r\ninterface Props {\r\n  dayTime: boolean;\r\n}\r\n\r\ninterface backgroundImg {\r\n  dayPc: string;\r\n  dayMobile: string;\r\n  nightPc: string;\r\n  nightMobile: string;\r\n}\r\n\r\nclass AppBackground extends Component<Props> {\r\n  private appBackground: any;\r\n  private backgroundImg: backgroundImg;\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.appBackground = React.createRef();\r\n\r\n    this.backgroundImg = {\r\n      dayPc: dayPcImg,\r\n      dayMobile: dayMobileImg,\r\n      nightPc: nightPcImg, // -\r\n      nightMobile: nightMobileImg\r\n    };\r\n  }\r\n\r\n  setBackgroundImage() {\r\n    if (this.appBackground.current != null) {\r\n      if (this.props.dayTime) {\r\n        document.documentElement.style.setProperty(\r\n          \"--image-pc\",\r\n          `url('${this.backgroundImg.dayPc}')`\r\n        );\r\n        document.documentElement.style.setProperty(\r\n          \"--image-mobile\",\r\n          `url('${this.backgroundImg.dayMobile}')`\r\n        );\r\n      } else {\r\n        document.documentElement.style.setProperty(\r\n          \"--image-pc\",\r\n          `url('${this.backgroundImg.nightPc}')`\r\n        );\r\n        document.documentElement.style.setProperty(\r\n          \"--image-mobile\",\r\n          `url('${this.backgroundImg.nightMobile}')`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.setBackgroundImage();\r\n\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {({ theme }) => (\r\n          <div className=\"app-background\" ref={this.appBackground}>\r\n            <div\r\n              className=\"dark-layer\"\r\n              style={{ backgroundColor: theme.appBackground.background }}\r\n            />\r\n          </div>\r\n        )}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppBackground;\r\n","import \"./Menu.scss\";\r\nimport React, { Component } from \"react\";\r\nimport { ThemeContext } from \"../Themes/theme-context\";\r\n\r\ninterface Props {\r\n  toggleButtonSimple(): void;\r\n  toggleButtonTheme(): void;\r\n  isButtonSimple: boolean;\r\n  isButtonTheme: boolean;\r\n}\r\n\r\ninterface State {\r\n  isOpen: boolean;\r\n  buttonSimple: boolean;\r\n  buttonTheme: boolean;\r\n}\r\n\r\nclass Menu extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n      buttonSimple: this.props.isButtonSimple,\r\n      buttonTheme: this.props.isButtonTheme\r\n    };\r\n  }\r\n\r\n  onClickMenu = (e: any) => {\r\n    this.setState(prevState => ({\r\n      isOpen: !prevState.isOpen\r\n    }));\r\n  };\r\n\r\n  onClickButtonSimple = (e: any) => {\r\n    this.setState(prevState => ({\r\n      buttonSimple: !prevState.buttonSimple\r\n    }));\r\n    this.props.toggleButtonSimple();\r\n  };\r\n\r\n  onClickTheme = (e: any) => {\r\n    this.setState(prevState => ({\r\n      buttonTheme: !prevState.buttonTheme\r\n    }));\r\n    this.props.toggleButtonTheme();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-menu\">\r\n        <div\r\n          className={this.state.isOpen ? \"nav-icon nav-icon-open\" : \"nav-icon\"}\r\n          onClick={e => this.onClickMenu(e)}\r\n        >\r\n          <div />\r\n        </div>\r\n        {this.state.isOpen && (\r\n          <>\r\n            <button\r\n              className={\r\n                this.state.buttonSimple\r\n                  ? \"app-menu-button button-simple menu-button-open\"\r\n                  : \"app-menu-button button-simple\"\r\n              }\r\n              onClick={e => this.onClickButtonSimple(e)}\r\n            >\r\n              Simple mode {this.state.buttonSimple ? \"on\" : \"off\"}\r\n            </button>\r\n            <button\r\n              className={\r\n                this.state.buttonTheme\r\n                  ? \"app-menu-button button-theme menu-button-open\"\r\n                  : \"app-menu-button button-theme\"\r\n              }\r\n              onClick={e => this.onClickTheme(e)}\r\n            >\r\n              Dark theme {this.state.buttonTheme ? \"on\" : \"off\"}\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import \"./Search.scss\";\r\nimport React, { Component } from \"react\";\r\n\r\ninterface Props {\r\n  onSubmit(city: string): void;\r\n  onChange(city: string): void;\r\n  city: string;\r\n  turnOnLoading(): void;\r\n}\r\n\r\ninterface State {\r\n  isValid: boolean;\r\n  isEmpty: boolean;\r\n}\r\n\r\nclass Search extends Component<Props, State> {\r\n  private input: React.RefObject<HTMLInputElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isValid: false,\r\n      isEmpty: false\r\n    };\r\n    this.input = React.createRef();\r\n  }\r\n\r\n  centerInput = (e: any) => {\r\n    const value = e.target.value;\r\n    if (value.length) {\r\n      this.setState({ isEmpty: false });\r\n    } else this.setState({ isEmpty: true });\r\n\r\n    this.props.onChange(value);\r\n  };\r\n\r\n  submitInput = (e: any) => {\r\n    const value = e.target.value;\r\n    const enterCode = 13;\r\n    if (e.keyCode === enterCode) {\r\n      const city = e.target.value.trim();\r\n      if (this.isValidCityName(value)) {\r\n        this.props.turnOnLoading();\r\n        this.props.onSubmit(city);\r\n      }\r\n    }\r\n  };\r\n\r\n  isValidCityName(name: string) {\r\n    return !!name && !/\\d/.test(name);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const search: any = document.getElementById(\"search\");\r\n    search.value = this.props.city;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-container\">\r\n        <input\r\n          className={this.state.isEmpty ? \"\" : \"search-not-empty\"}\r\n          id=\"search\"\r\n          name=\"search\"\r\n          type=\"text\"\r\n          value={this.props.city}\r\n          ref={this.input}\r\n          placeholder=\"City, place or country...\"\r\n          autoComplete=\"off\"\r\n          // onInput={e => this.centerInput(e)}\r\n          onChange={e => this.centerInput(e)}\r\n          onKeyUp={e => this.submitInput(e)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import \"./Spinner.scss\";\r\nimport React from \"react\";\r\n\r\ninterface Props {}\r\n\r\nfunction Dots(props: Props) {\r\n  return (\r\n    <div className=\"lds-ellipsis\">\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dots;\r\n","import \"./CurrentForecast.scss\";\r\nimport React from \"react\";\r\nimport { ForecastCurrent } from \"./CurrentForecast.interface\";\r\n\r\nclass CurrentForecast extends React.PureComponent<ForecastCurrent> {\r\n  getDate(date: string): string {\r\n    let newDate = new Date(date);\r\n    return newDate.toLocaleString(\"en-us\", { weekday: \"long\" });\r\n  }\r\n\r\n  render() {\r\n    if (this.props.forecast.data.length) {\r\n      const temp_now: number = this.props.forecast.data[0].temp;\r\n      const timestamp_local: string = this.props.forecast.data[0]\r\n        .timestamp_local;\r\n      return (\r\n        <div className=\"current-forecast\">\r\n          <div className=\"current-forecast-temperature\">\r\n            {Math.round(temp_now)}\r\n          </div>\r\n          <div className=\"current-forecast-day\">\r\n            {this.getDate(timestamp_local)}\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>not found</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default CurrentForecast;\r\n","export const getWindIcon = (degree: number): string => {\r\n  return \"rotateZ(\" + degree + \"deg)\";\r\n};\r\n\r\nexport const getWeatherIcon = (code: number): string => {\r\n  let time = \"day\";\r\n  switch (code.toString()) {\r\n    case \"200\":\r\n      return \"wi-\" + time + \"-storm-showers\"; //Thunderstorm with light rain\r\n    case \"201\":\r\n      return \"wi-\" + time + \"-storm-showers\"; //Thunderstorm with rain\r\n    case \"202\":\r\n      return \"wi-\" + time + \"-thunderstorm\"; //Thunderstorm with heavy rain\r\n    case \"230\":\r\n      return \"wi-\" + time + \"-lightning\"; //Thunderstorm with light drizzle\r\n    case \"231\":\r\n      return \"wi-lightning\"; //Thunderstorm with light drizzle\r\n    case \"232\":\r\n      return \"wi-lightning\"; //Thunderstorm with heavy drizzle\r\n    case \"233\":\r\n      return \"wi-lightning\"; //Thunderstorm with Hail\r\n    case \"300\":\r\n      return \"wi-\" + time + \"-showers\"; //Light Drizzle\r\n    case \"301\":\r\n      return \"wi-\" + time + \"-showers\"; //Drizzle\r\n    case \"302\":\r\n      return \"wi-\" + time + \"-showers\"; //Heavy Drizzle\r\n    case \"500\":\r\n      return \"wi-\" + time + \"-rain\"; //Light Rain\r\n    case \"501\":\r\n      return \"wi-\" + time + \"-rain\"; //Moderate Rain\r\n    case \"502\":\r\n      return \"wi-rain\"; //Heavy Rain\r\n    case \"511\":\r\n      return \"wi-rain\"; //Freezing rain\r\n    case \"520\":\r\n      return \"wi-\" + time + \"-showers\"; //Light shower rain\r\n    case \"521\":\r\n      return \"wi-\" + time + \"-showers\"; //Shower rain\r\n    case \"522\":\r\n      return \"wi-showers\"; //Heavy shower rain\r\n    case \"600\":\r\n      return \"wi-\" + time + \"-snow\"; //Light snow\r\n    case \"601\":\r\n      return \"wi-snow\"; //Snow\r\n    case \"602\":\r\n      return \"wi-snowflake-cold\"; //Heavy Snow\r\n    case \"610\":\r\n      return \"wi-\" + time + \"-sleet\"; //Mix snow/rain\r\n    case \"611\":\r\n      return \"wi-sleet\"; //Sleet\r\n    case \"612\":\r\n      return \"wi-sleet\"; //Heavy sleet\r\n    case \"621\":\r\n      return \"wi-\" + time + \"-sleet\"; //Snow shower\r\n    case \"622\":\r\n      return \"wi-snowflake-cold\"; //Heavy snow shower\r\n    case \"623\":\r\n      return \"wi-snow-wind\"; //Flurries\r\n    case \"700\":\r\n      return \"wi-\" + time + \"-fog\"; //Mist\r\n    case \"711\":\r\n      return \"wi-smog\"; //Smoke\r\n    case \"721\":\r\n      return \"wi-\" + time + \"-fog\"; //Haze\r\n    case \"731\":\r\n      return \"wi-dust\"; //Sand/dust\r\n    case \"741\":\r\n      return \"wi-\" + time + \"-fog\"; //Fog\r\n    case \"751\":\r\n      return \"wi-\" + time + \"-fog\"; //Freezing Fog\r\n    case \"800\":\r\n      if (time === \"day\") return \"wi-day-sunny\";\r\n      //Clear sky\r\n      else return \"wi-night-clear\"; //Clear sky\r\n    case \"801\":\r\n      return \"wi-\" + time + \"-cloudy\"; //Few clouds\r\n    case \"802\":\r\n      return \"wi-\" + time + \"-cloudy\"; //Scattered clouds\r\n    case \"803\":\r\n      return \"wi-\" + time + \"-cloudy\"; //Broken clouds\r\n    case \"804\":\r\n      return \"wi-cloudy\"; //Overcast clouds\r\n    case \"900\":\r\n      return \"wi-na\"; //Unknown Precipitation\r\n    default:\r\n      return \"na\"; //icon code not found\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { ForecastDetailsProps } from \"./ForecastDetails.interface\";\r\nimport { getWindIcon } from \"../../utils/getWeatherIcon\";\r\n\r\nclass ForecastDetails extends React.PureComponent<ForecastDetailsProps> {\r\n  render() {\r\n    const { rh, precip, wind_dir, wind_spd } = this.props.forecast;\r\n    return (\r\n      <div className=\"daily-forecast-block\">\r\n        {this.props.isSimpleMode ? (\r\n          <>\r\n            <div className=\"daily-forecast-col\">\r\n              <div className=\"daily-forecast-humidity\" />\r\n              <div className=\"daily-forecast-precip\" />\r\n            </div>\r\n            <div className=\"daily-forecast-col\">\r\n              <div className=\"daily-forecast-wind-icon\" />\r\n              <div className=\"daily-forecast-wind\" />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"daily-forecast-col\">\r\n              <div className=\"daily-forecast-humidity\">\r\n                <i className=\"wi wi-raindrop\" /> {Math.round(rh)} %\r\n              </div>\r\n              <div className=\"daily-forecast-precip\">\r\n                <i className=\"wi wi-raindrops\" /> {Math.round(precip)} mm\r\n              </div>\r\n            </div>\r\n            <div className=\"daily-forecast-col\">\r\n              <div className=\"daily-forecast-wind-icon\">\r\n                <i\r\n                  className=\"wi wi-wind-direction\"\r\n                  style={{ transform: getWindIcon(wind_dir) }}\r\n                />\r\n              </div>\r\n              <div className=\"daily-forecast-wind\">\r\n                {Math.round(wind_spd)}\r\n                <span>m/s</span>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForecastDetails;\r\n","import React from \"react\";\r\nimport { weatherDaily } from \"../App.interface\";\r\nimport { getWeatherIcon } from \"../../utils/getWeatherIcon\";\r\n\r\ninterface DayProps {\r\n  forecast: weatherDaily;\r\n  renderForecastDetails(): void;\r\n}\r\n\r\nclass Day extends React.PureComponent<DayProps> {\r\n  getDate(date: string): string {\r\n    let newDate = new Date(date);\r\n    return newDate.toLocaleString(\"en-us\", { weekday: \"long\" });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      weather: { code },\r\n      max_temp,\r\n      min_temp,\r\n      datetime\r\n    } = this.props.forecast;\r\n    return (\r\n      <button className=\"daily-forecast-button\">\r\n        <div className=\"daily-forecast-day\">{this.getDate(datetime)}</div>\r\n        {this.props.renderForecastDetails()}\r\n        <div className=\"daily-forecast-col\">\r\n          <div className=\"daily-forecast-weather-icon\">\r\n            <i className={\"wi \" + getWeatherIcon(code)} />\r\n          </div>\r\n          <div className=\"daily-forecast-temperature\">\r\n            {Math.round(max_temp)}\r\n          </div>\r\n        </div>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Day;\r\n\r\n/* <div className=\"daily-forecast-block\">\r\n          <div className=\"daily-forecast-col\">\r\n            <div className=\"daily-forecast-humidity\">\r\n              <i className=\"wi wi-raindrop\" /> {Math.round(rh)} %\r\n            </div>\r\n            <div className=\"daily-forecast-precip\">\r\n              <i className=\"wi wi-raindrops\" /> {Math.round(precip)} mm\r\n            </div>\r\n          </div>\r\n          <div className=\"daily-forecast-col\">\r\n            <div className=\"daily-forecast-wind-icon\">\r\n              <i\r\n                className=\"wi wi-wind-direction\"\r\n                style={{ transform: getWindIcon(wind_dir) }}\r\n              />\r\n            </div>\r\n            <div className=\"daily-forecast-wind\">\r\n              {Math.round(wind_spd)}\r\n              <span>m/s</span>\r\n            </div>\r\n          </div>\r\n        </div> */\r\n","import \"./DailyForecast.scss\";\r\nimport React from \"react\";\r\nimport { ForecastDaily } from \"./DailyForecast.interface\";\r\nimport ForecastDetails from \"./ForecastDetails\";\r\nimport { ThemeContext } from \"../Themes/theme-context\";\r\nimport Day from \"./Day\";\r\n\r\nclass DailyForecast extends React.PureComponent<ForecastDaily> {\r\n  render() {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {({ theme }) => (\r\n          <div\r\n            className=\"daily-forecast\"\r\n            style={{ backgroundColor: theme.dailyForecast.background }}\r\n          >\r\n            {this.props.forecast.data.map(day => (\r\n              <Day\r\n                forecast={day}\r\n                key={day.datetime}\r\n                renderForecastDetails={() => (\r\n                  <ForecastDetails\r\n                    isSimpleMode={this.props.isSimpleMode}\r\n                    forecast={day}\r\n                  />\r\n                )}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DailyForecast;\r\n","import React, { Component } from \"react\";\r\nimport _get from \"lodash/get\";\r\nimport { getForecast } from \"../utils/api\";\r\nimport { ThemeContext, themes } from \"./Themes/theme-context\";\r\nimport { AppBackground } from \"./AppBackground/\";\r\nimport { Menu } from \"./Menu/\";\r\nimport { Search } from \"./Search/\";\r\nimport { Spinner } from \"./LoadingAnimation/\";\r\nimport { CurrentForecast } from \"./CurrentForecast/\";\r\nimport { DailyForecast } from \"./DailyForecast/\";\r\nimport {\r\n  ForecastCurrentStructure,\r\n  ForecastDailyStructure,\r\n  MenuStructure,\r\n  Themes\r\n} from \"./App.interface\";\r\nimport \"./App.scss\";\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  currentForecastData: ForecastCurrentStructure;\r\n  dailyForecastData: ForecastDailyStructure;\r\n  menu: MenuStructure;\r\n  isLoading: boolean;\r\n  city: string;\r\n  dayTime: boolean;\r\n  error: boolean;\r\n  theme: Themes;\r\n  toggleTheme(): void;\r\n}\r\n\r\nclass App extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentForecastData: {\r\n        data: [],\r\n        city_name: \"\",\r\n        country_code: \"\",\r\n        timezone: \"\"\r\n      },\r\n      dailyForecastData: {\r\n        data: [],\r\n        city_name: \"\",\r\n        country_code: \"\",\r\n        timezone: \"\"\r\n      },\r\n      menu: {\r\n        isMenuOpen: false,\r\n        isButtonSimple: true,\r\n        isButtonTheme: false\r\n      },\r\n      isLoading: true,\r\n      city: \"Kyiv, UA\",\r\n      dayTime: true,\r\n      error: false,\r\n      theme: themes.light,\r\n      toggleTheme: this.toggleTheme\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onSubmit(this.state.city);\r\n  }\r\n\r\n  toggleTheme() {\r\n    this.setState(state => ({\r\n      theme: state.theme === themes.dark ? themes.light : themes.dark\r\n    }));\r\n  }\r\n\r\n  removeFirstDay(forecast: any) {\r\n    forecast.data.shift();\r\n    return forecast;\r\n  }\r\n\r\n  onSearchChange = (value: string) => {\r\n    this.setState({ city: value });\r\n  };\r\n\r\n  onSubmit = async (city: string) => {\r\n    let data: any = await getForecast(city);\r\n    console.log(data);\r\n    if (data[0] === \"error\") {\r\n      console.log(\"error\");\r\n      this.setState({ error: true });\r\n    } else {\r\n      let cityName = _get(data[0], \"city_name\");\r\n      let country–°ode = _get(data[0], \"country_code\");\r\n      let city = `${cityName}, ${country–°ode}`;\r\n      let currentTimeRaw = _get(data[0].data[0], \"timestamp_local\");\r\n      let currentForecastData = data[0];\r\n      let dailyForecastData = this.removeFirstDay(data[1]);\r\n      let currentTime = this.getTime(currentTimeRaw);\r\n      this.setState({\r\n        currentForecastData: currentForecastData,\r\n        dailyForecastData: dailyForecastData,\r\n        isLoading: false,\r\n        city: city,\r\n        dayTime: currentTime > 6 && currentTime < 18 ? true : false,\r\n        error: false\r\n      });\r\n    }\r\n  };\r\n\r\n  turnOnLoading = () => {\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n  };\r\n\r\n  getTime(date: string): number {\r\n    let newDate = new Date(date);\r\n    return newDate.getHours();\r\n  }\r\n\r\n  menuButtonSimple = () => {\r\n    this.setState(prevState => ({\r\n      menu: {\r\n        ...this.state.menu,\r\n        isButtonSimple: !prevState.menu.isButtonSimple\r\n      }\r\n    }));\r\n  };\r\n\r\n  menuButtonTheme = () => {\r\n    this.toggleTheme();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <ThemeContext.Provider value={this.state}>\r\n          <AppBackground dayTime={this.state.dayTime} />\r\n          <Menu\r\n            toggleButtonSimple={this.menuButtonSimple}\r\n            toggleButtonTheme={this.menuButtonTheme}\r\n            isButtonSimple={this.state.menu.isButtonSimple}\r\n            isButtonTheme={this.state.menu.isButtonTheme}\r\n          />\r\n          <Search\r\n            onSubmit={this.onSubmit}\r\n            onChange={this.onSearchChange}\r\n            city={this.state.city}\r\n            turnOnLoading={this.turnOnLoading}\r\n          />\r\n          {this.state.error ? (\r\n            <div className=\"app-error\">City not found</div>\r\n          ) : (\r\n            <>\r\n              {this.state.isLoading ? (\r\n                <Spinner />\r\n              ) : (\r\n                <>\r\n                  <CurrentForecast forecast={this.state.currentForecastData} />\r\n                  <DailyForecast\r\n                    forecast={this.state.dailyForecastData}\r\n                    isSimpleMode={this.state.menu.isButtonSimple}\r\n                  />\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </ThemeContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./scss/index.scss\";\r\nimport App from \"./components/App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}